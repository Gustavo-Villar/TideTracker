package main

import (
	"context"      // Provides functionality for carrying deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.
	"database/sql" // SQL database interface essentials for interaction with SQL databases.
	"log"          // Logging package to log standard error messages, including errors and routine operation messages.
	"strings"      // Provides simple functions to manipulate UTF-8 encoded strings.
	"sync"         // Synchronization primitives such as mutual exclusion locks.
	"time"         // Provides functionality for measuring and displaying time.

	"github.com/Gustavo-Villar/TideTracker/internal/database" // Internal package for database operations, defined in the TideTracker project.
	"github.com/google/uuid"                                  // UUID package to generate unique identifiers for new posts.
)

// startScraping initiates the scraping process with specified concurrency and timing.
func startScraping(
	db *database.Queries, // Database query interface generated by sqlc.
	concurrency int, // Number of concurrent scraping goroutines.
	timeBetweenRequest time.Duration, // Interval between successive scraping operations.
) {
	log.Printf("Scraping on %v goroutines every %s duration", concurrency, timeBetweenRequest)

	ticker := time.NewTicker(timeBetweenRequest) // Ticker to manage scraping intervals.

	for ; ; <-ticker.C { // Infinite loop triggered by ticker intervals.
		feeds, err := db.GetNextFeedsToFetch(
			context.Background(),
			int32(concurrency),
		)
		if err != nil {
			log.Println("error fetching feeds", err)
			continue
		}

		wg := &sync.WaitGroup{} // WaitGroup to manage concurrency.
		for _, feed := range feeds {
			wg.Add(1) // Increment WaitGroup counter for each feed.

			go scrapeFeed(db, wg, feed) // Launch scraping in a goroutine.
		}
		wg.Wait() // Block until all feeds have been processed.
	}
}

// scrapeFeed fetches and processes a single RSS feed.
func scrapeFeed(db *database.Queries, wg *sync.WaitGroup, feed database.Feed) {
	defer wg.Done() // Decrement WaitGroup counter on function exit.

	_, err := db.MarkFeedAsFetched(context.Background(), feed.ID) // Mark feed as fetched in the database.
	if err != nil {
		log.Println("Error marking feed as fetched:", err)
		return
	}

	rssFeed, err := urlToFeed(feed.Url) // Convert URL to RSS feed structure.
	if err != nil {
		log.Println("Error fetching feed:", err)
		return
	}

	for _, item := range rssFeed.Channel.Item { // Iterate over items in the feed.
		description := sql.NullString{}
		if item.Description != "" {
			description.String = item.Description
			description.Valid = true
		}

		pubDate, err := time.Parse(time.RFC1123Z, item.PubDate) // Parse publication date.
		if err != nil {
			log.Printf("couldn't parse date %v with err %v\n", item.PubDate, err)
			continue
		}

		_, err = db.CreatePost(context.Background(), database.CreatePostParams{
			ID:          uuid.New(),  // Generate unique ID for the post.
			CreatedAt:   time.Now(),  // Set current time as creation time.
			UpdatedAt:   time.Now(),  // Set current time as update time.
			Title:       item.Title,  // Set post title.
			Description: description, // Set post description.
			Url:         item.Link,   // Set post URL.
			FeedID:      feed.ID,     // Associate post with the feed.
			PublishedAt: pubDate,     // Set post publication date.
		})

		if err != nil {
			if strings.Contains(err.Error(), "duplicate key") {
				continue // Skip duplicates.
			}
			log.Printf("couldn't create post %v\n", err)
		}
	}
	log.Printf(">>> Feed %s collected, %v posts found", feed.Name, len(rssFeed.Channel.Item)) // Log completion of feed processing.
}
